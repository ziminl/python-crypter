
import base64
import zlib
import marshal
from cryptography.fernet import Fernet

key = "OGxrMXNwSjdwV1M2elp1aDY2Nm5tVElaQlQ2M25kaTV5c21WRjlTN0pBaz0="
encrypted_data = b"""eb(\xe2\xaf\xdfj\xbc\x0e\xcc\xdc\xc9&\x9b\xdc\x18\x12\x90\xea\xaaS\xa7\xce)\x90\xe0\xef\x19\xd6\xfb\x1c\x19\xca^\xe5\x97\x1cG=\xc1\xe6\x9dX\xfeO$X\x9f\xaaJ\x91\xe3\xf76m|\x9eUF\x9bR\xe3\x9a5^\x91\xa9\x1bxw;\xb3\xd8W\x18-\x154\xe6\xb9\xbfQ\xd7\xd9\xc7\xb3.\x9d\xdb\n\xc1\xfc\x8a\x8a\xb6fqR@\x1cO\xe6\x91\xc2"\xfd\x98\xaa>wp\xa4\xb2XS\xb6\xa1vME\xd8\xbe\x16\xa7\x82\xa0e\x91\xa8z\xcdvK\x1d0\xf07\xcb?$\xd4\xe6\xc9Nk\x18\xf5N\xe4\xb8\xbe\xb8\x88\x9c%\xbe\x97:z\xf5Q}\xc9\xe6~\xbf\xa7\xcb\x93\xe3\x9d\x1cy\x1ej\n\x827W\x86\xc3\x1f\xa8Z\x0e9\xe5\x05xk:\xdf(\x0c\xeb\xb3\x1c\xc9\xfc\x1b-\xeb\xb5{\x8e\xfdkN=\xe7\x19G\x90\xd1C_m&\xa2#\xf0QS\x15\xe2-\xe3\xbb3\xc5v\x07\x9c\xf4Z\x90[v\x9b\x8a\xdc\x0e\xfa\xa2\xfd\xa8\xb9<}\xd4\x06\xbc\xfd[p\x9a\xd4x\\\x03\'}9\xf0\xf1\x82\x8c&\xc5z\x95\xc4\xb7\xbb\x83\xeav\x8a\x1d\xe2\x8e\x8c\x1a\nYG\x8bD\x8d\xba\x1cxM+\xa3\xccz\x83?y\x9b\xe0\xef2\x01\xb3D\xa5 u\xd4gB\xef_+\xe3oF\x95\n8\x1a\xe30\x03\xcc\xe69\xb5\xeaO<=\xf0\xfe\xd6\xe75\xc5\xfe\x01\xb8\xaeS\x98!\x9a\xd6\xc4S~l\xce0\x07\xfe\x80\xe7\xd8?\xc8\xd8\xcc\x8a\x94\x17\x91\xf3\xdcbejE\x1cz\x9br\r\xf9\xfd\x0e\xae\xe7\x9c\x81\x0bM\xec\xe3\xec\x04\xb5\xca\x1c\x87z\x8e\xcf\x97\xa0\xd6wAh\xba\x9f\xf1\xff\xaak\xea%\xcc\xaa|\x11>O1\xe8kWT\xeen\xd1\x91\xaa+\xe4Y?\xd4\xd6\xff}\x8e_25\x02\xed\x96\xca\xbe\xd7\xcc\xa0\xf6\xcecO\xff\x1f\xab\xbf\xe6\x81\x17\xda\xae\x1fz\xedS\xfb\x10w\xc8\xc0W\x10sb\x94\xf1\xb4\xf1>\xf4\x0e\xf3\xb9\xe6H+\xd9\xe0\xb1\xe2\xe6\xae\x96P?Z\x00\x873\xd0\xdf\xe1\xe1\x87\xdaA\x8d}M\xe7\xc3,$\xcep/\xb5\xf6\xf8\x0f|\xcb\x95\x14r\x13\x0e\x9a\x98\xfb\x1c<|a\xc80\xdf0h\x98\xc2\xb3ih9.\xa5fVRk\xa4\xaa\x9dD\xe42\xf79\x9d\x13\xc8\xb9\xac\xc8\xdd\xe6\xae\x08{\xb6#\x0e\xfb\xfaNeb\xf8U\x04\xbc\xad\xdd\x19\xb5\x15\xaa\xda\rU7\xa0\x0b\xbd\'+\xa5 \x95\xdb\xb9\x98\t\xc0_!\xf1\xc1q\xc5f\xd2\xef\xb7kV\x81>\x109\xbaqxc\x81\xc9I\xd1V\x80M\x91\xdc\xfc\x8ee\xc3]5\xbcK,I\x13)9\xd6/Te_\xeam\x1e\x98DR\x01\xcf\xb0\x8ft\xd0\x19\xbc\x17\xace\xf3\x08\xfa(+v\x9fM\xeaK\x0e\xa7;e\xf0\xf3\x11\xf8?\x83nj\xe0z\x01s\x08\x929p\x8ao\x9c\x992\xd6;=\xe6\x03Z\x9a\xdbe\xb6\x9aI\xeei0\xb3\xd7\xe0\xd7\x13\x8by\xb3\xb7<\xdd\r\xe4\xcc\xecf\x1b\x8f\x9c\xc0{\x01\xf5\xc5X\xbf+\x9e\xdc%\xc2<\xee\xd5\xbc\x07\x7f\\\xd8j\x06\xfbu\xc3\xb3\xc6\x9f\xf2\xd0~\xc6\xaauI\xbc\xf9\xe9XF\xc9\xac\xe2Qo\xb8\xaf\x7f\xd5\x06/\xe3n\xd0\x9fW\xeb\xe1\x0e\xf0\xc2\xce\x803Z\xbd\x8d\xfc>\x8fC\xa9\xc5/\xfa\xfd\xc3\xfd[\x1b%\x01\xadm\xa9\xdc\xcd\xbe\x1d*&\n\xd6\x91\x8c\x93s\x18k\x8f=J\xdc\xc0\xd98W\xc7\xfb\x8a\xf1\x8f\xf4\xcd\x9f>\x00\xcd\x82.}\xf0\xc1\xf0}\x01\x9c\xcf\xe7\xf2\xa1\x1f\xf8\x0e\xca\xef\xd9vg\x8f\xde\x81\xb9\x01\xde\xf746\xe5\xac&\xb9\x86o\xccs\xee\x8f<|\xaaw\xc0"2\xfd;\xfdB\x9f\xdf`\x9a\xf6:\xf4\'\xb1\x0fx\xa8j\xc2N]_\x12\xd8U\x0c\x15\xd5vu\xf3\x12\n;6X\xfc%\xf1M\xf6K;zaV\x82\xde\xcep\xdf\xc9\x9d\x0b;\xfb\x9f\x7f\x01\x841\xab4"""

# Additional obfuscation
encrypted_data = zlib.decompress(encrypted_data)
encrypted_data = base64.b64decode(encrypted_data)

decryption_key = base64.b64decode(key)
cipher_suite = Fernet(decryption_key)
decrypted_data = cipher_suite.decrypt(marshal.loads(encrypted_data))

decompressed_data = zlib.decompress(decrypted_data).decode()
exec(decompressed_data)


to


import base64
import zlib
import marshal
from cryptography.fernet import Fernet

key = "OGxrMXNwSjdwV1M2elp1aDY2Nm5tVElaQlQ2M25kaTV5c21WRjlTN0pBaz0="
encrypted_data = b"""xe2\xaf\xdfj\xbc\x0e\xcc\xdc\xc9&\x9b\xdc\x18\x12\x90\xea\xaaS\xa7\xce)\x90\xe0\xef\x19\xd6\xfb\x1c\x19\xca^\xe5\x97\x1cG=\xc1\xe6\x9dX\xfeO$X\x9f\xaaJ\x91\xe3\xf76m|\x9eUF\x9bR\xe3\x9a5^\x91\xa9\x1bxw;\xb3\xd8W\x18-\x154\xe6\xb9\xbfQ\xd7\xd9\xc7\xb3.\x9d\xdb\n\xc1\xfc\x8a\x8a\xb6fqR@\x1cO\xe6\x91\xc2"\xfd\x98\xaa>wp\xa4\xb2XS\xb6\xa1vME\xd8\xbe\x16\xa7\x82\xa0e\x91\xa8z\xcdvK\x1d0\xf07\xcb?$\xd4\xe6\xc9Nk\x18\xf5N\xe4\xb8\xbe\xb8\x88\x9c%\xbe\x97:z\xf5Q}\xc9\xe6~\xbf\xa7\xcb\x93\xe3\x9d\x1cy\x1ej\n\x827W\x86\xc3\x1f\xa8Z\x0e9\xe5\x05xk:\xdf(\x0c\xeb\xb3\x1c\xc9\xfc\x1b-\xeb\xb5{\x8e\xfdkN=\xe7\x19G\x90\xd1C_m&\xa2#\xf0QS\x15\xe2-\xe3\xbb3\xc5v\x07\x9c\xf4Z\x90[v\x9b\x8a\xdc\x0e\xfa\xa2\xfd\xa8\xb9<}\xd4\x06\xbc\xfd[p\x9a\xd4x\\\x03\'}9\xf0\xf1\x82\x8c&\xc5z\x95\xc4\xb7\xbb\x83\xeav\x8a\x1d\xe2\x8e\x8c\x1a\nYG\x8bD\x8d\xba\x1cxM+\xa3\xccz\x83?y\x9b\xe0\xef2\x01\xb3D\xa5 u\xd4gB\xef_+\xe3oF\x95\n8\x1a\xe30\x03\xcc\xe69\xb5\xeaO<=\xf0\xfe\xd6\xe75\xc5\xfe\x01\xb8\xaeS\x98!\x9a\xd6\xc4S~l\xce0\x07\xfe\x80\xe7\xd8?\xc8\xd8\xcc\x8a\x94\x17\x91\xf3\xdcbejE\x1cz\x9br\r\xf9\xfd\x0e\xae\xe7\x9c\x81\x0bM\xec\xe3\xec\x04\xb5\xca\x1c\x87z\x8e\xcf\x97\xa0\xd6wAh\xba\x9f\xf1\xff\xaak\xea%\xcc\xaa|\x11>O1\xe8kWT\xeen\xd1\x91\xaa+\xe4Y?\xd4\xd6\xff}\x8e_25\x02\xed\x96\xca\xbe\xd7\xcc\xa0\xf6\xcecO\xff\x1f\xab\xbf\xe6\x81\x17\xda\xae\x1fz\xedS\xfb\x10w\xc8\xc0W\x10sb\x94\xf1\xb4\xf1>\xf4\x0e\xf3\xb9\xe6H+\xd9\xe0\xb1\xe2\xe6\xae\x96P?Z\x00\x873\xd0\xdf\xe1\xe1\x87\xdaA\x8d}M\xe7\xc3,$\xcep/\xb5\xf6\xf8\x0f|\xcb\x95\x14r\x13\x0e\x9a\x98\xfb\x1c<|a\xc80\xdf0h\x98\xc2\xb3ih9.\xa5fVRk\xa4\xaa\x9dD\xe42\xf79\x9d\x13\xc8\xb9\xac\xc8\xdd\xe6\xae\x08{\xb6#\x0e\xfb\xfaNeb\xf8U\x04\xbc\xad\xdd\x19\xb5\x15\xaa\xda\rU7\xa0\x0b\xbd\'+\xa5 \x95\xdb\xb9\x98\t\xc0_!\xf1\xc1q\xc5f\xd2\xef\xb7kV\x81>\x109\xbaqxc\x81\xc9I\xd1V\x80M\x91\xdc\xfc\x8ee\xc3]5\xbcK,I\x13)9\xd6/Te_\xeam\x1e\x98DR\x01\xcf\xb0\x8ft\xd0\x19\xbc\x17\xace\xf3\x08\xfa(+v\x9fM\xeaK\x0e\xa7;e\xf0\xf3\x11\xf8?\x83nj\xe0z\x01s\x08\x929p\x8ao\x9c\x992\xd6;=\xe6\x03Z\x9a\xdbe\xb6\x9aI\xeei0\xb3\xd7\xe0\xd7\x13\x8by\xb3\xb7<\xdd\r\xe4\xcc\xecf\x1b\x8f\x9c\xc0{\x01\xf5\xc5X\xbf+\x9e\xdc%\xc2<\xee\xd5\xbc\x07\x7f\\\xd8j\x06\xfbu\xc3\xb3\xc6\x9f\xf2\xd0~\xc6\xaauI\xbc\xf9\xe9XF\xc9\xac\xe2Qo\xb8\xaf\x7f\xd5\x06/\xe3n\xd0\x9fW\xeb\xe1\x0e\xf0\xc2\xce\x803Z\xbd\x8d\xfc>\x8fC\xa9\xc5/\xfa\xfd\xc3\xfd[\x1b%\x01\xadm\xa9\xdc\xcd\xbe\x1d*&\n\xd6\x91\x8c\x93s\x18k\x8f=J\xdc\xc0\xd98W\xc7\xfb\x8a\xf1\x8f\xf4\xcd\x9f>\x00\xcd\x82.}\xf0\xc1\xf0}\x01\x9c\xcf\xe7\xf2\xa1\x1f\xf8\x0e\xca\xef\xd9vg\x8f\xde\x81\xb9\x01\xde\xf746\xe5\xac&\xb9\x86o\xccs\xee\x8f<|\xaaw\xc0"2\xfd;\xfdB\x9f\xdf`\x9a\xf6:\xf4\'\xb1\x0fx\xa8j\xc2N]_\x12\xd8U\x0c\x15\xd5vu\xf3\x12\n;6X\xfc%\xf1M\xf6K;zaV\x82\xde\xcep\xdf\xc9\x9d\x0b;\xfb\x9f\x7f\x01\x841\xab4"""

# Additional obfuscation
try:
    # Step 1: Decompress
    encrypted_data = zlib.decompress(encrypted_data)
    print("After decompression:", encrypted_data)

    # Step 2: Marshal Load
    encrypted_data = marshal.loads(encrypted_data)
    print("After marshal loading:", encrypted_data)

    # Step 3: Base64 decode
    encrypted_data = base64.b64decode(encrypted_data)
    print("After base64 decoding:", encrypted_data)

    # Step 4: Decrypt using Fernet
    decryption_key = base64.b64decode(key)
    cipher_suite = Fernet(decryption_key)
    decrypted_data = cipher_suite.decrypt(encrypted_data)
    print("After decryption:", decrypted_data)

    # Step 5: Decompress final data
    decompressed_data = zlib.decompress(decrypted_data).decode()
    print("Decompressed data:", decompressed_data)

    # Step 6: Execute the final data
    exec(decompressed_data)

except Exception as e:
    print(f"An error occurred: {e}")



###output


C:\>python obfuscated_postexcute.py
After decompression: b'ZXhlY3V0ZV9jb2RlKGV2ZW50PU5vbmUpOgogICAgY29kZSA9IHRleHRfYXJlYS5nZXQoIjEuMCIsIHRrLkVORCkuc3RyaXAoKQoKICAgIGlmIGNvZGU6CiAgICAgICAgb2xkX3N0ZG91dCA9IHN5cy5zdGRvdXQKICAgICAgICByZWRpcmVjdGVkX291dHB1dCA9IHN5cy5zdGRvdXQgPSBpby5TdHJpbmdJTygpCiAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgZXhlYyhjb2RlLCBnbG9iYWxzKCkpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChmIkVycm9yOiB7ZX0iKQogICAgICAgIGZpbmFsbHk6CiAgICAgICAgICAgIHN5cy5zdGRvdXQgPSBvbGRfc3Rkb3V0CgogICAgICAgIG91dHB1dCA9IHJlZGlyZWN0ZWRfb3V0cHV0LmdldHZhbHVlKCkKICAgICAgICBvdXRwdXRfYXJlYS5jb25maWcoc3RhdGU9dGsuTk9STUFMKQogICAgICAgIG91dHB1dF9hcmVhLmRlbGV0ZSgiMS4wIiwgdGsuRU5EKQogICAgICAgIG91dHB1dF9hcmVhLmluc2VydCh0ay5FTkQsIG91dHB1dCkKICAgICAgICBvdXRwdXRfYXJlYS5jb25maWcoc3RhdGU9dGsuRElTQUJMRUQpCgpkZWYgb25fcGFzdGUoZXZlbnQpOgogICAgcm9vdC5hZnRlcigxMDAsIGV4ZWN1dGVfY29kZSkKCnJvb3QgPSB0ay5UaygpCnJvb3QudGl0bGUoIlBhc3RlIGFuZCBFeGVjdXRlIFB5dGhvbiBDb2RlIikKYmdfY29sb3IgPSAiIzJlMmUyZSIKZmdfY29sb3IgPSAiI2ZmZmZmZiIKaW5zZXJ0X2JnX2NvbG9yID0gIiMwMGZmMDAiCm91dHB1dF9iZ19jb2xvciA9ICIjMWUxZTFlIgpidXR0b25fYmdfY29sb3IgPSAiIzNlM2UzZSIKYnV0dG9uX2ZnX2NvbG9yID0gIiNmZmZmZmYiCgpyb290LmNvbmZpZ3VyZShiZz1iZ19jb2xvcikKCnRleHRfYXJlYSA9IHNjcm9sbGVkdGV4dC5TY3JvbGxlZFRleHQocm9vdCwgd3JhcD10ay5XT1JELCBoZWlnaHQ9MTAsIGJnPWJnX2NvbG9yLCBmZz1mZ19jb2xvciwgaW5zZXJ0YmFja2dyb3VuZD1pbnNlcnRfYmdfY29sb3IpCnRleHRfYXJlYS5wYWNrKHBhZHg9MTAsIHBhZHk9MTAsIGZpbGw9dGsuQk9USCwgZXhwYW5kPVRydWUpCgpvdXRwdXRfYXJlYSA9IHNjcm9sbGVkdGV4dC5TY3JvbGxlZFRleHQocm9vdCwgd3JhcD10ay5XT1JELCBoZWlnaHQ9MTAsIHN0YXRlPXRrLkRJU0FCTEVELCBiZz1vdXRwdXRfYmdfY29sb3IsIGZnPWZnX2NvbG9yKQpvdXRwdXRfYXJlYS5wYWNrKHBhZHg9MTAsIHBhZHk9MTAsIGZpbGw9dGsuQk9USCwgZXhwYW5kPVRydWUpCgpleGVjdXRlX2J1dHRvbiA9IHRrLkJ1dHRvbihyb290LCB0ZXh0PSJFeGVjdXRlIiwgY29tbWFuZD1leGVjdXRlX2NvZGUsIGJnPWJ1dHRvbl9iZ19jb2xvciwgZmc9YnV0dG9uX2ZnX2NvbG9yKQpleGVjdXRlX2J1dHRvbi5wYWNrKHBhZHk9MTApCgp0ZXh0X2FyZWEuYmluZCgiPDxQYXN0ZT4+Iiwgb25fcGFzdGUpCgpyb290Lm1haW5sb29wKCkKCgo='
An error occurred: bad marshal data (unknown type code)




##usage


import base64
import zlib

# Compressed and obfuscated data
compressed_data =b"""xe2\xaf\xdfj\xbc\x0e\xcc\xdc\xc9&\x9b\xdc\x18\x12\x90\xea\xaaS\xa7\xce)\x90\xe0\xef\x19\xd6\xfb\x1c\x19\xca^\xe5\x97\x1cG=\xc1\xe6\x9dX\xfeO$X\x9f\xaaJ\x91\xe3\xf76m|\x9eUF\x9bR\xe3\x9a5^\x91\xa9\x1bxw;\xb3\xd8W\x18-\x154\xe6\xb9\xbfQ\xd7\xd9\xc7\xb3.\x9d\xdb\n\xc1\xfc\x8a\x8a\xb6fqR@\x1cO\xe6\x91\xc2"\xfd\x98\xaa>wp\xa4\xb2XS\xb6\xa1vME\xd8\xbe\x16\xa7\x82\xa0e\x91\xa8z\xcdvK\x1d0\xf07\xcb?$\xd4\xe6\xc9Nk\x18\xf5N\xe4\xb8\xbe\xb8\x88\x9c%\xbe\x97:z\xf5Q}\xc9\xe6~\xbf\xa7\xcb\x93\xe3\x9d\x1cy\x1ej\n\x827W\x86\xc3\x1f\xa8Z\x0e9\xe5\x05xk:\xdf(\x0c\xeb\xb3\x1c\xc9\xfc\x1b-\xeb\xb5{\x8e\xfdkN=\xe7\x19G\x90\xd1C_m&\xa2#\xf0QS\x15\xe2-\xe3\xbb3\xc5v\x07\x9c\xf4Z\x90[v\x9b\x8a\xdc\x0e\xfa\xa2\xfd\xa8\xb9<}\xd4\x06\xbc\xfd[p\x9a\xd4x\\\x03\'}9\xf0\xf1\x82\x8c&\xc5z\x95\xc4\xb7\xbb\x83\xeav\x8a\x1d\xe2\x8e\x8c\x1a\nYG\x8bD\x8d\xba\x1cxM+\xa3\xccz\x83?y\x9b\xe0\xef2\x01\xb3D\xa5 u\xd4gB\xef_+\xe3oF\x95\n8\x1a\xe30\x03\xcc\xe69\xb5\xeaO<=\xf0\xfe\xd6\xe75\xc5\xfe\x01\xb8\xaeS\x98!\x9a\xd6\xc4S~l\xce0\x07\xfe\x80\xe7\xd8?\xc8\xd8\xcc\x8a\x94\x17\x91\xf3\xdcbejE\x1cz\x9br\r\xf9\xfd\x0e\xae\xe7\x9c\x81\x0bM\xec\xe3\xec\x04\xb5\xca\x1c\x87z\x8e\xcf\x97\xa0\xd6wAh\xba\x9f\xf1\xff\xaak\xea%\xcc\xaa|\x11>O1\xe8kWT\xeen\xd1\x91\xaa+\xe4Y?\xd4\xd6\xff}\x8e_25\x02\xed\x96\xca\xbe\xd7\xcc\xa0\xf6\xcecO\xff\x1f\xab\xbf\xe6\x81\x17\xda\xae\x1fz\xedS\xfb\x10w\xc8\xc0W\x10sb\x94\xf1\xb4\xf1>\xf4\x0e\xf3\xb9\xe6H+\xd9\xe0\xb1\xe2\xe6\xae\x96P?Z\x00\x873\xd0\xdf\xe1\xe1\x87\xdaA\x8d}M\xe7\xc3,$\xcep/\xb5\xf6\xf8\x0f|\xcb\x95\x14r\x13\x0e\x9a\x98\xfb\x1c<|a\xc80\xdf0h\x98\xc2\xb3ih9.\xa5fVRk\xa4\xaa\x9dD\xe42\xf79\x9d\x13\xc8\xb9\xac\xc8\xdd\xe6\xae\x08{\xb6#\x0e\xfb\xfaNeb\xf8U\x04\xbc\xad\xdd\x19\xb5\x15\xaa\xda\rU7\xa0\x0b\xbd\'+\xa5 \x95\xdb\xb9\x98\t\xc0_!\xf1\xc1q\xc5f\xd2\xef\xb7kV\x81>\x109\xbaqxc\x81\xc9I\xd1V\x80M\x91\xdc\xfc\x8ee\xc3]5\xbcK,I\x13)9\xd6/Te_\xeam\x1e\x98DR\x01\xcf\xb0\x8ft\xd0\x19\xbc\x17\xace\xf3\x08\xfa(+v\x9fM\xeaK\x0e\xa7;e\xf0\xf3\x11\xf8?\x83nj\xe0z\x01s\x08\x929p\x8ao\x9c\x992\xd6;=\xe6\x03Z\x9a\xdbe\xb6\x9aI\xeei0\xb3\xd7\xe0\xd7\x13\x8by\xb3\xb7<\xdd\r\xe4\xcc\xecf\x1b\x8f\x9c\xc0{\x01\xf5\xc5X\xbf+\x9e\xdc%\xc2<\xee\xd5\xbc\x07\x7f\\\xd8j\x06\xfbu\xc3\xb3\xc6\x9f\xf2\xd0~\xc6\xaauI\xbc\xf9\xe9XF\xc9\xac\xe2Qo\xb8\xaf\x7f\xd5\x06/\xe3n\xd0\x9fW\xeb\xe1\x0e\xf0\xc2\xce\x803Z\xbd\x8d\xfc>\x8fC\xa9\xc5/\xfa\xfd\xc3\xfd[\x1b%\x01\xadm\xa9\xdc\xcd\xbe\x1d*&\n\xd6\x91\x8c\x93s\x18k\x8f=J\xdc\xc0\xd98W\xc7\xfb\x8a\xf1\x8f\xf4\xcd\x9f>\x00\xcd\x82.}\xf0\xc1\xf0}\x01\x9c\xcf\xe7\xf2\xa1\x1f\xf8\x0e\xca\xef\xd9vg\x8f\xde\x81\xb9\x01\xde\xf746\xe5\xac&\xb9\x86o\xccs\xee\x8f<|\xaaw\xc0"2\xfd;\xfdB\x9f\xdf`\x9a\xf6:\xf4\'\xb1\x0fx\xa8j\xc2N]_\x12\xd8U\x0c\x15\xd5vu\xf3\x12\n;6X\xfc%\xf1M\xf6K;zaV\x82\xde\xcep\xdf\xc9\x9d\x0b;\xfb\x9f\x7f\x01\x841\xab4"""

try:
    # Step 1: Decompress the data using zlib
    decompressed_data = zlib.decompress(compressed_data)
    print("After decompression:", decompressed_data)

    # Step 2: Decode the decompressed data as Base64
    decoded_data = base64.b64decode(decompressed_data)
    print("After Base64 decoding:", decoded_data)

    # Step 3: Execute the decoded Python code (Assuming it's valid Python code)
    exec(decoded_data)

except Exception as e:
    print(f"An error occurred: {e}")

